// Este es tu archivo de esquema Prisma,
// obtén más información al respecto en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id           String   @id @default(cuid())
  name         String   @unique
  route        String   @unique
  isPublic     Boolean  @default(false)
  imageLink    String?
  customizable Boolean  @default(false)
  roles        Role[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  pages     Page[]
  icon      String?
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Region {
  id                String             @id @default(cuid())
  name              String
  code              String             @unique
  countries         Country[]          @relation("RegionOfCountry")
  regionsPercentage RegionPercentage[] @relation("PercentagePerRegion")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RegionPercentage {
  id         String   @id @default(cuid())
  region     Region   @relation("PercentagePerRegion", fields: [regionId], references: [id])
  regionId   String
  percentage Decimal  @db.Decimal(5, 2)
  project    Project  @relation("RegionPercentageProject", fields: [projectId], references: [id])
  projectId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Country {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  states    State[]  @relation("CountryOfState")
  region    Region   @relation("RegionOfCountry", fields: [regionId], references: [id])
  regionId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  cities    City[]   @relation("CityOfState")
  country   Country  @relation("CountryOfState", fields: [countryId], references: [id])
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  state     State     @relation("CityOfState", fields: [stateId], references: [id])
  stateId   String
  Company   Company[] @relation("CityOfCompany")
  Profile   Profile[] @relation("CityOfProfile")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                            String                 @id @default(cuid())
  deleted                       Boolean                @default(false)
  enabled                       Boolean                @default(true)
  email                         String                 @unique
  emailVerified                 DateTime?
  image                         String?
  company                       Company                @relation("CompanyOfUser", fields: [companyId], references: [id])
  companyId                     String
  firstName                     String
  lastName                      String
  profile                       Profile?               @relation("UserProfile")
  siteNumber                    String?
  projectNews                   ProjectNews[]          @relation("ProjectNewsUser")
  teamMemberOf                  TeamMembers[]          @relation("UserMemberOfProject")
  roles                         Role[]
  accounts                      Account[]
  sessions                      Session[]
  membersCreatedBy              TeamMembers[]          @relation("CreatedByUser")
  membersUpdatedBy              TeamMembers[]          @relation("UpdatedByUser")
  projectsCreatedBy             Project[]              @relation("CreatedByUser")
  projectsUpdatedBy             Project[]              @relation("UpdatedByUser")
  rrActivitiesAssignedTo        RRActivity[]           @relation("UserAssignedTo")
  rrActivitiesCreatedBy         RRActivity[]           @relation("CreatedByUser")
  rrActivitiesUpdatedBy         RRActivity[]           @relation("UpdatedByUser")
  meetingsCreatedBy             MeetingMinutes[]       @relation("CreatedByUser")
  meetingsUpdatedBy             MeetingMinutes[]       @relation("UpdatedByUser")
  sitesRegulatoryBinderCreated  SiteRegulatoryBinder[] @relation("CreatedByUser")
  sitesRegulatoryBinderUpdated  SiteRegulatoryBinder[] @relation("UpdatedByUser")
  matrixStudyDocumentsCreatedBy MatrixStudyDocuments[] @relation("CreatedByUser")
  matrixStudyDocumentsUpdatedBy MatrixStudyDocuments[] @relation("UpdatedByUser")
  visitsReportTrackerCreatedBy  VisitReportTracker[]   @relation("CreatedByUser")
  visitsReportTrackerUpdatedBy  VisitReportTracker[]   @relation("UpdatedByUser")
  tmfsTrackersCreatedBy         TMFsTracker[]          @relation("CreatedByUser")
  tmfsTrackersUpdatedBy         TMFsTracker[]          @relation("UpdatedByUser")
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
}

model Company {
  id        String    @id @default(cuid())
  name      String
  address   String?
  projects  Project[] @relation("ProjectOfCompany")
  city      City      @relation("CityOfCompany", fields: [cityId], references: [id])
  cityId    String
  User      User[]    @relation("CompanyOfUser")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id        String     @id @default(cuid())
  phone     String?
  city      City       @relation("CityOfProfile", fields: [cityId], references: [id])
  cityId    String
  title     Enum_Title
  address   String?
  user      User       @relation("UserProfile", fields: [userId], references: [id])
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Project {
  id                                     String                 @id @default(cuid())
  sponsorName                            String
  studyName                              String
  firstName                              String
  lastName                               String
  email                                  String
  country                                String
  phone                                  String
  studyDesign                            StudyDesign[]          @relation("StudyDesignOfProject")
  studyType                              StudyType              @relation("StudyTypeProject", fields: [studyTypeId], references: [id])
  studyTypeId                            String
  diseaseTargetMarket                    DiseaseTargetMarket    @relation("DiseaseTargetMarketProject", fields: [diseaseTargetMarketId], references: [id])
  diseaseTargetMarketId                  String
  condition                              Condition              @relation("ConditionOfProject", fields: [conditionId], references: [id])
  conditionId                            String
  services                               Service[]
  company                                Company                @relation("ProjectOfCompany", fields: [companyId], references: [id])
  companyId                              String
  regionDistribution                     RegionPercentage[]     @relation("RegionPercentageProject")
  numberSubjects                         Int
  numberUsersSponsor                     Int
  numberUsersClinicalProjectManager      Int
  numberUsersClinicalResearchAssociate   Int
  numberUsersRegulatory                  Int
  numberUsersClinicalProjectAssistant    Int
  numberUsersThirdParty                  Int
  numberSitesFeasibility                 Int
  numberSitesQualification               Int
  numberSitesSelection                   Int
  numberEnrollmentSupport                Int
  numberEnrollmentSupportFrequency       Int
  siteInitiationPlan                     Int
  enrollmentSupportSite                  Int
  imvSite                                Int
  imvRemote                              Int
  imvTelephone                           Int
  startUpPhase                           Int
  screeningEnrollmentPhase               Int
  followUpPhase                          Int
  closeOutPhase                          Int
  projectNews                            ProjectNews[]          @relation("ProjectNewsOfProject")
  description                            String?
  members                                TeamMembers[]          @relation("MembersOfProject")
  rbmPercentageSubjects                  Decimal?               @db.Decimal(5, 2)
  rbmPercentageInformedConReview         Decimal?               @db.Decimal(5, 2)
  rbmPercentageInclusionCritReview       Decimal?               @db.Decimal(5, 2)
  rbmPercentageExclusionCritReview       Decimal?               @db.Decimal(5, 2)
  rbmPercentageEndpointsReview           Decimal?               @db.Decimal(5, 2)
  rbmPercentageConcomitantsMedReview     Decimal?               @db.Decimal(5, 2)
  rbmPercentageAdverseEventsReview       Decimal?               @db.Decimal(5, 2)
  rbmPercentageMajorDevProtReview        Decimal?               @db.Decimal(5, 2)
  rbmPercentageDevicAccountabilityReview Decimal?               @db.Decimal(5, 2)
  rrActivity                             RRActivity?            @relation("ProjectRRActivity")
  matrixStudyDocument                    MatrixStudyDocuments?  @relation("ProjectMatrixStudyDocuments")
  visitReportTracker                     VisitReportTracker?    @relation("ProjectVisitReportTracker")
  tmfsTrackers                           TMFsTracker[]          @relation("ProjectTMFSTracker")
  sitesRegulatoryBinder                  SiteRegulatoryBinder[] @relation("ProjectSiteRegulatoryBinder")
  meetingMinutes                         MeetingMinutes[]       @relation("ProjectMeetingMinutes")
  createdBy                              User                   @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById                            String
  updatedBy                              User                   @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById                            String
  createdAt                              DateTime               @default(now())
  updatedAt                              DateTime               @updatedAt
}

model Condition {
  id        String    @id @default(cuid())
  name      String
  level     Int
  enabled   Boolean   @default(true)
  projects  Project[] @relation("ConditionOfProject")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DiseaseTargetMarket {
  id        String    @id @default(cuid())
  name      String
  level     Int
  enabled   Boolean   @default(true)
  projects  Project[] @relation("DiseaseTargetMarketProject")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StudyType {
  id        String    @id @default(cuid())
  name      String
  level     Int
  enabled   Boolean   @default(true)
  projects  Project[] @relation("StudyTypeProject")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StudyDesign {
  id        String    @id @default(cuid())
  name      String
  level     Int
  enabled   Boolean   @default(true)
  projects  Project[] @relation("StudyDesignOfProject")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id        String    @id @default(cuid())
  name      String
  level     Int
  enabled   Boolean   @default(true)
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProjectNews {
  id        String   @id @default(cuid())
  comment   String
  user      User     @relation("ProjectNewsUser", fields: [userId], references: [id])
  userId    String
  project   Project  @relation("ProjectNewsOfProject", fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMembers {
  id                                  String           @id @default(cuid())
  user                                User             @relation("UserMemberOfProject", fields: [userId], references: [id])
  userId                              String
  project                             Project          @relation("MembersOfProject", fields: [projectId], references: [id])
  projectId                           String
  position                            StudyRole        @relation("RoleInsideProject", fields: [positionId], references: [id])
  positionId                          String
  studyMemberStatus                   Boolean?         @default(true)
  statusLearUpProgramManagementSystem Boolean
  statusLearUpGxPDocumentRepository   String
  statusEDC                           String
  studyStartDate                      DateTime
  studyEndDate                        DateTime
  notifications                       Notification[]   @relation("NotificationToTeamMember")
  ownerMeetings                       MeetingMinutes[] @relation("Owner")
  attendeesMeetings                   MeetingMinutes[] @relation("Attendees")
  createdBy                           User             @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById                         String
  updatedBy                           User             @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById                         String
  createdAt                           DateTime         @default(now())
  updatedAt                           DateTime         @updatedAt
}

model RRActivity {
  id                          String           @id @default(cuid())
  responsible                 Enum_Responsible
  department                  Department       @relation("DepartmentActivity", fields: [departmentId], references: [id])
  departmentId                String
  classCostCenter             ClassCostCenter  @relation("ClassCostCenterOfActivity", fields: [classCostCenterId], references: [id])
  classCostCenterId           String
  billingUnitValue            Enum_BillingUV
  qty                         Int
  qtyAmendment                Int?
  acceptanceAmendment         Boolean?
  totalCostAmendment          Int?
  totalAdditionalQty          Int?
  unitCost                    Decimal          @db.Decimal(5, 2)
  totalOriginalCost           Decimal          @db.Decimal(5, 2)
  overallTotalEstimatedBudget Decimal          @db.Decimal(5, 2)
  balanceQty                  Int
  percentageExecutionQty      Decimal          @db.Decimal(5, 2)
  balanceBudget               Decimal          @db.Decimal(5, 2)
  percentageExecutionBudget   Decimal          @db.Decimal(5, 2)
  assignedTo                  User             @relation("UserAssignedTo", fields: [userId], references: [id])
  userId                      String
  dedicatedHoursPerMonth      Int
  mByMQtyExecution            Int
  mByMExecutionPrice          Decimal          @db.Decimal(5, 2)
  mByMQtyForecast             Int
  mByMForecastPrice           Decimal          @db.Decimal(5, 2)
  percentageCompleted         Decimal          @db.Decimal(5, 2)
  project                     Project          @relation("ProjectRRActivity", fields: [projectId], references: [id])
  projectId                   String           @unique
  createdBy                   User             @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById                 String
  updatedBy                   User             @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById                 String
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
}

model StudyRole {
  id             String        @id @default(cuid())
  name           String
  studyRoleUsers TeamMembers[] @relation("RoleInsideProject")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model MatrixStudyDocuments {
  id          String     @id @default(cuid())
  category    String
  comments    String?
  version     String?
  documents   Document[] @relation("DocumentOfMatrixStudyDocs")
  project     Project    @relation("ProjectMatrixStudyDocuments", fields: [projectId], references: [id])
  projectId   String     @unique
  createdBy   User       @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById String
  updatedBy   User       @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Notification {
  id                   String             @id @default(cuid())
  message              String
  user                 TeamMembers        @relation("NotificationToTeamMember", fields: [userId], references: [id])
  userId               String
  visitReportTracker   VisitReportTracker @relation("NotificationVisitReportTracker", fields: [visitReportTrackerId], references: [id])
  visitReportTrackerId String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Document {
  id                    String               @id @default(cuid())
  name                  String               @unique
  files                 DocumentFile[]       @relation("DocumentFile")
  matrixStudyDocument   MatrixStudyDocuments @relation("DocumentOfMatrixStudyDocs", fields: [matrixStudyDocumentId], references: [id])
  matrixStudyDocumentId String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

model DocumentFile {
  id            String   @id @default(cuid())
  name          String
  type          String
  url           String
  shareFileUrl  String?
  smartSheetUrl String?
  document      Document @relation("DocumentFile", fields: [documentId], references: [id])
  documentId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VisitReportTracker {
  id                          String         @id @default(cuid())
  siteNumber                  String
  siteName                    String
  piLastName                  String
  craName                     String
  teamNotifications           Notification[] @relation("NotificationVisitReportTracker")
  visitType                   Enum_VisitType
  visitNumber                 Int? // min 1 max 9
  confirmationLetterDate      DateTime
  visitStartDate              DateTime
  visitEndDate                DateTime
  submitToCPMDeadlineDate     DateTime
  daysToSubmit                Int
  cpmReviewFinalizationDate   DateTime
  visitReportDeadlineDate     DateTime
  comments                    String?
  visitReportFinalizationDate DateTime
  daysToDeadline              Int
  project                     Project        @relation("ProjectVisitReportTracker", fields: [projectId], references: [id])
  projectId                   String         @unique
  followUpLetterDate          DateTime
  tmfsTrackers                TMFsTracker[]  @relation("T_VisitReportTracker")
  createdBy                   User           @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById                 String
  updatedBy                   User           @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById                 String
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
}

model TMFsTracker {
  id               String                @id @default(cuid())
  zoneNumber       String
  sectionNumber    String
  artifactNumber   String                @unique
  code             Enum_Code?
  codeNumber       String?
  documentName     String
  versionNumber    String
  documentDate     DateTime
  expirationDate   DateTime?
  daysToExpire     DateTime?
  collectionStatus Enum_CollectionStatus
  inTMF            Boolean               @default(false)
  signature        Enum_Signature
  link             String // Relacion con DocumentFile?
  comments         String?
  site             VisitReportTracker?   @relation("T_VisitReportTracker", fields: [siteId], references: [id])
  siteId           String?
  today            DateTime              @default(now())
  regBinder        Boolean?              @default(false)
  imv              Boolean?              @default(false)
  projectId        String
  project          Project               @relation("ProjectTMFSTracker", fields: [projectId], references: [id])
  createdBy        User                  @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById      String
  updatedBy        User                  @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById      String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model SiteRegulatoryBinder {
  id                  String      @id @default(cuid())
  notApplicable       Boolean?    @default(false)
  percentageComplete  Decimal     @db.Decimal(5, 2)
  description         String
  date                DateTime?
  cpaCpaSiteComplete  Enum_Symbol @default(Red)
  cpaCpaSiteUpload    Boolean
  cogentechQC         Enum_Symbol @default(Red)
  cogentechQCApproved Boolean     @default(false)
  statusTMF           Enum_Symbol @default(Red)
  filledInTMF         Boolean?
  project             Project     @relation("ProjectSiteRegulatoryBinder", fields: [projectId], references: [id])
  projectId           String
  createdBy           User        @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById         String
  updatedBy           User        @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById         String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model MeetingMinutes {
  id           String        @id @default(cuid())
  done         Boolean?      @default(false)
  followUp     Boolean?      @default(false)
  meetingTopic String
  description  String?
  owner        TeamMembers   @relation("Owner", fields: [ownerId], references: [id])
  ownerId      String
  priority     Enum_Priority @default(Important)
  start        DateTime
  end          DateTime
  otherNotes   String?
  attendees    TeamMembers[] @relation("Attendees")
  projectId    String
  project      Project       @relation("ProjectMeetingMinutes", fields: [projectId], references: [id])
  createdBy    User          @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById  String
  updatedBy    User          @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Department {
  id           String       @id @default(cuid())
  name         String
  enabled      Boolean      @default(true)
  rrActivities RRActivity[] @relation("DepartmentActivity")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ClassCostCenter {
  id           String       @id @default(cuid())
  name         String
  enabled      Boolean      @default(true)
  rrActivities RRActivity[] @relation("ClassCostCenterOfActivity")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum Enum_Priority {
  VeryImportant
  Important
  NotImportant
}

enum Enum_Symbol {
  Green
  Yellow
  Red
}

enum Enum_Code {
  NTF
  M
  PO
  EC_S
  EC_A
}

enum Enum_CollectionStatus {
  CorrectionsNeeded
  Complete
  Pending
  NotApplicable
}

enum Enum_Signature {
  Electronic
  Scan
}

enum Enum_VisitType {
  SQV
  SIV
  IMV
  RIMV
  COV
}

enum Enum_Region {
  APAC
  EUROPE
  LATAM
  NORTH_AMERICA
  OCEANIA
}

enum Enum_Title {
  MR
  MRS
  MS
  DR
  PROF
}

enum Enum_Responsible {
  Sponsor
  CogenTech
  Third_Party
}

enum Enum_BillingUV {
  OneTime
  PerAudit
  PerBinder
  PerDataLock
  PerDay
  PerDocument
  PerDossier
  PerEditCheck
  PerEvent
  PerForm
  PerHour
  PerMeeting
  PerMember
  PerMonth
  PerQC
  PerQuarter
  PerQuery
  PerReport
  PerSet_up
  PerShipment
  PerSite
  PerSite_visit
  PerStudy
  PerSubject
  PerSubmission
  PerTraining
  PerTransfer
  PerUnit
  PerUpdate
  PerUser_month
  PerVisit
  PerWeek
}

enum Enum_RoleName {
  Admin
  Client
}